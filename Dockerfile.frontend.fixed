# Multi-stage Dockerfile for erxes frontend
FROM node:18-alpine AS base

# Install pnpm
RUN corepack enable && corepack prepare pnpm@9.12.3 --activate

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY nx.json tsconfig.base.json ./
COPY jest.config.ts jest.preset.js ./

# Copy frontend source
COPY frontend ./frontend
COPY core-libraries.ts ./

# Install dependencies
FROM base AS deps
RUN pnpm install --no-frozen-lockfile

# Build stage
FROM deps AS build

# Set Node memory limit for builds
ENV NODE_OPTIONS="--max-old-space-size=4096"

# Build everything from the root workspace
WORKDIR /app

# Create nx.json if it doesn't exist and initialize workspace
RUN pnpm nx init || true

# Clean NX cache and initialize daemon
RUN pnpm exec nx reset && \
    pnpm exec nx clear-cache && \
    rm -rf node_modules/.cache/nx && \
    pnpm exec nx repair

# Make sure workspace is properly set up
RUN pnpm install --no-frozen-lockfile

# Build libs first
RUN cd frontend/libs/erxes-ui && pnpm build || true
RUN cd frontend/libs/ui-modules && pnpm build || true

# Build plugins
RUN cd frontend/plugins/operation_ui && pnpm build || true
RUN cd frontend/plugins/frontline_ui && pnpm build || true
RUN cd frontend/plugins/sales_ui && pnpm build || true
RUN cd frontend/plugins/payment_ui && pnpm build || true
RUN cd frontend/plugins/accounting_ui && pnpm build || true
RUN cd frontend/plugins/content_ui && pnpm build || true
RUN cd frontend/plugins/tourism_ui && pnpm build || true

# Build core-ui
RUN cd frontend/core-ui && pnpm build

# Production stage with nginx
FROM nginx:alpine AS production

# Copy built files
COPY --from=build /app/dist/frontend/core-ui /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]

# Development stage (optional)
FROM deps AS development

WORKDIR /app

EXPOSE 3001

CMD ["pnpm", "nx", "serve", "core-ui"]