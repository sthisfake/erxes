# Multi-stage Dockerfile for erxes frontend
FROM node:18-alpine AS base

# Install pnpm
RUN corepack enable && corepack prepare pnpm@9.12.3 --activate

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY nx.json tsconfig.base.json ./
COPY jest.config.ts jest.preset.js ./

# Copy frontend source
COPY frontend ./frontend
COPY core-libraries.ts ./

# Install dependencies
FROM base AS deps
RUN pnpm install --no-frozen-lockfile

# Build stage
FROM deps AS build

# Set Node memory limit for builds
ENV NODE_OPTIONS="--max-old-space-size=4096"

# Build everything from the root workspace
WORKDIR /app

# Clean NX cache and initialize daemon
RUN pnpm nx reset && \
    pnpm nx clear-cache && \
    rm -rf node_modules/.cache/nx

# Generate fresh project graph
RUN pnpm exec nx graph --file=proj-graph.json

# Build dependencies first with verbose logging
RUN pnpm nx run-many \
    --target=build \
    --projects=erxes-ui,ui-modules \
    --parallel=false \
    --verbose

# Build plugins
RUN pnpm nx run-many \
    --target=build \
    --projects=operation_ui,frontline_ui,sales_ui,payment_ui,accounting_ui,content_ui,tourism_ui \
    --parallel=2 \
    --verbose

# Build core-ui with verbose logging
RUN pnpm nx build core-ui --verbose

# Production stage with nginx
FROM nginx:alpine AS production

# Copy built files
COPY --from=build /app/dist/frontend/core-ui /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]

# Development stage (optional)
FROM deps AS development

WORKDIR /app

EXPOSE 3001

CMD ["pnpm", "nx", "serve", "core-ui"]