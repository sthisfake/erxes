version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6
    container_name: erxes-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: erxes
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - erxes-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/erxes --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: erxes-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - erxes-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ (Optional - for message queue)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: erxes-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: erxes
      RABBITMQ_DEFAULT_PASS: erxes123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - erxes-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5

  # Elasticsearch (Optional - for search functionality)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: erxes-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - erxes-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Core API Service
  core-api:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: core-api
    container_name: erxes-core-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3300
      MONGO_URL: mongodb://mongodb:27017/erxes
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      RABBITMQ_HOST: amqp://erxes:erxes123@rabbitmq:5672
      ELASTICSEARCH_URL: http://elasticsearch:9200
      DOMAIN: ${DOMAIN:-http://localhost:3001}
      ALLOWED_DOMAINS: ${ALLOWED_DOMAINS:-http://localhost:3001}
      CLIENT_PORTAL_DOMAINS: ${CLIENT_PORTAL_DOMAINS:-}
      NODE_OPTIONS: --max-old-space-size=1536
    ports:
      - "3300:3300"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - erxes-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3300/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Gateway Service
  gateway:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: gateway
    container_name: erxes-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      MONGO_URL: mongodb://mongodb:27017/erxes
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      RABBITMQ_HOST: amqp://erxes:erxes123@rabbitmq:5672
      DOMAIN: ${DOMAIN:-http://localhost:3001}
      NODE_OPTIONS: --max-old-space-size=1536
    ports:
      - "4000:4000"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      core-api:
        condition: service_healthy
    networks:
      - erxes-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Automations Service
  automations:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: automations
    container_name: erxes-automations
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3400
      MONGO_URL: mongodb://mongodb:27017/erxes
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      RABBITMQ_HOST: amqp://erxes:erxes123@rabbitmq:5672
      NODE_OPTIONS: --max-old-space-size=1536
    ports:
      - "3400:3400"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - erxes-network

  # Logs Service
  logs:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: logs
    container_name: erxes-logs
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3500
      MONGO_URL: mongodb://mongodb:27017/erxes
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      NODE_OPTIONS: --max-old-space-size=1536
    ports:
      - "3500:3500"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - erxes-network

  # Operation Plugin API
  operation-api:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: plugins
    container_name: erxes-operation-api
    restart: unless-stopped
    working_dir: /app/backend/plugins/operation_api
    command: ["pnpm", "start"]
    environment:
      NODE_ENV: production
      PORT: 4010
      MONGO_URL: mongodb://mongodb:27017/erxes
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      RABBITMQ_HOST: amqp://erxes:erxes123@rabbitmq:5672
      NODE_OPTIONS: --max-old-space-size=1536
    ports:
      - "4010:4010"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - erxes-network

  # Frontline Plugin API
  frontline-api:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: plugins
    container_name: erxes-frontline-api
    restart: unless-stopped
    working_dir: /app/backend/plugins/frontline_api
    command: ["pnpm", "start"]
    environment:
      NODE_ENV: production
      PORT: 4011
      MONGO_URL: mongodb://mongodb:27017/erxes
      CORE_MONGO_URL: mongodb://mongodb:27017/erxes_core
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      RABBITMQ_HOST: amqp://erxes:erxes123@rabbitmq:5672
      NODE_OPTIONS: --max-old-space-size=1536
    ports:
      - "4011:4011"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - erxes-network

  # Sales Plugin API
  sales-api:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: plugins
    container_name: erxes-sales-api
    restart: unless-stopped
    working_dir: /app/backend/plugins/sales_api
    command: ["pnpm", "start"]
    environment:
      NODE_ENV: production
      PORT: 4012
      MONGO_URL: mongodb://mongodb:27017/erxes
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      RABBITMQ_HOST: amqp://erxes:erxes123@rabbitmq:5672
      NODE_OPTIONS: --max-old-space-size=1536
    ports:
      - "4012:4012"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - erxes-network

  # Payment Plugin API
  payment-api:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: plugins
    container_name: erxes-payment-api
    restart: unless-stopped
    working_dir: /app/backend/plugins/payment_api
    command: ["pnpm", "start"]
    environment:
      NODE_ENV: production
      PORT: 4013
      MONGO_URL: mongodb://mongodb:27017/erxes
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      RABBITMQ_HOST: amqp://erxes:erxes123@rabbitmq:5672
      NODE_OPTIONS: --max-old-space-size=1536
    ports:
      - "4013:4013"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - erxes-network

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: erxes-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://gateway:4000
    ports:
      - "3001:80"
    depends_on:
      - gateway
    networks:
      - erxes-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  erxes-network:
    driver: bridge
